#
# Script de construccion (SCons)
#
import os

plataforma = ARGUMENTS.get('OS', Platform())
env = Environment(CPPPATH = ['src/robot', 'src/red_neuronal', 'src/libpipeline', 'src/filtro_gestos', 'src/ventana_imagen'], ENV = os.environ, platform = plataforma, PLATFORM=plataforma, LIBPATH=['lib'])

if str(plataforma) == str('win32'):
#    env = env.Copy(CCFLAGS='-g', CXXFLAGS='-g', CC='gcc -mms-bitfields', tools=['mingw'], LINKFLAGS='--export-dynamic') CCFLAGS=['-DWIN32=1'], 
    env.Append(CPPPATH = ['c:\GTK\include', 'C:\GTK\include/atk-1.0/', 'c:\GTK\include\glib-2.0', 'c:\GTK\include\gtk-2.0', 'c:\GTK\lib\glib-2.0\include', 'c:\GTK\lib\gtk-2.0\include', 'c:\GTK\include\pango-1.0', 'c:\GTK\include\libglade-2.0', 'c:\GTK\include\libxml2'], LIBPATH=['lib', 'c:\GTK\lib'],LIBS=['gdk-win32-2.0', 'gdk_pixbuf-2.0', 'gmodule-2.0', 'xml2', 'glade-2.0', 'gobject-2.0', 'gtk-win32-2.0', 'glib-2.0'])
else:
    env.ParseConfig('pkg-config glib-2.0 --cflags --libs')
    env.ParseConfig('pkg-config libglade-2.0 --cflags --libs')

print "-- Compilando para", plataforma, "--"

if ARGUMENTS.get('release', 0):
    print ('-- Release --')
    env.Append(DEBUG=0)
else:
    print ('-- Debug --')
    env.Append(DEBUG=1)

# Libpipeline
libpipeline = env.Library('lib/pipeline', 'src/libpipeline/pipeline.c')
env.Install('bin', ['src/libpipeline/pipeline.dtd'])

# Gestion
env.SharedLibrary('bin/gestion', 'src/gestion/gestion.c')

# Filtro gestos
fil = env.Copy()
fil.Append(LIBS=['lua', 'lualib'])
fil.SharedLibrary('bin/filtro_gestos', 'src/filtro_gestos/filtro_gestos.c')
env.Install('bin', ['src/filtro_gestos/filtro.lua'])

# Salida
env.SharedLibrary('bin/salida', 'src/salida/salida.c')
env.Install('bin', ['src/salida/ventana_salida.glade'])

# La ventana de imagenes
env.SharedLibrary('bin/ventana_imagen', 'src/ventana_imagen/ventana_imagen.c')
env.Install('bin', ['src/ventana_imagen/ventana_imagen.glade'])

# Imagenes o camara, segun sea Linux o Windows
if str(plataforma) == str('posix'):
    img = env.Copy()
    img.ParseConfig('pkg-config libxine --cflags --libs')
    img.Append(LIBS=['sane'])
    img.SharedLibrary('bin/imagenes', 'src/imagenes/imagenes.c')
else:
    cam = env.Copy()
    cam.Append(LIBS=['strmiids', 'uuid', 'oleaut32', 'ole32', 'quartz', 'user32'])
    cam.SharedLibrary('bin/camara', ['src/camara/camara.cpp', 'src/camara/Captura.cpp'])


# Ocr
env.SharedLibrary('bin/ocr', ['src/ocr/ocr.c', 'src/ocr/ocr_code.c'])
env.Install('bin', ['src/ocr/base_datos'])

# Post gestion
env.SharedLibrary('bin/post_gestion', 'src/post_gestion/post_gestion.c')

# Red neuronal
env.SharedLibrary('bin/red_neuronal', ['src/red_neuronal/red.c', 'src/red_neuronal/red_neuronal.c'])
env.Install('bin', ['src/red_neuronal/orden_net'])

# Robot
rob = env.Copy()
if str(plataforma) == str('posix'):
    rob.Append(LIBS=['lua', 'lualib', 'parapin'])
else:
    rob.Append(LIBS=['lua', 'lualib'])
    
rob.SharedLibrary('bin/robot', 'src/robot/robot.c')
env.Install('bin', ['src/robot/robot.lua'])

# Ventana parametros
env.SharedLibrary('bin/ventana_parametros', 'src/ventana_parametros/ventana_parametros.c')
env.Install('bin', ['src/ventana_parametros/ventana_parametros.glade'])


# El ejecutable
pip = env.Copy()
pip.Prepend(LIBS=['pipeline'])
Depends(pip.Program('bin/pipeline', 'src/pipeline/main.c'), libpipeline)
env.Install('bin', ['src/pipeline/ventana_pipeline.glade'])
env.Install('bin', ['src/pipeline/vision.xml'])
env.Install('bin', ['src/pipeline/nulo.xml'])
env.Install('bin', ['src/pipeline/camara.xml'])


# Documentacion
if str(plataforma) == str('posix'):
    env.PostScript('bin/vision', 'doc/vision.tex')
