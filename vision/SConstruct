#
# Script de construccion (SCons)
#
import os
import glob
    
plataforma = ARGUMENTS.get('OS', Platform())
env = Environment(CPPPATH = ['src/libparalelo', 'src/robot', 'src/red_neuronal', 'src/libpipeline', 'src/filtro_gestos', 'src/ventana_imagen'], ENV = os.environ, platform = plataforma, PLATFORM=plataforma, LIBPATH=['lib'])


if str(plataforma) == str('win32'):
    debug=' /Od '
    optimizar= ' /O2 '
    linker=' /debug '
else:
	debug='-ggdb'
	optimizar = '-O2'
	linker=''

print "-- Compilando para", plataforma, "--"

if ARGUMENTS.get('release', 0):
    print ('-- Release --')
    env.Append(CCFLAGS=optimizar)
else:
    print ('-- Debug --')
    env.Append(CCFLAGS=debug, LINKFLAGS=linker)


if str(plataforma) == str('win32'):
    env.Append(CPPPATH = ['c:\GTK\include', 'C:\GTK\include/atk-1.0/', 'c:\GTK\include\glib-2.0', 'c:\GTK\include\gtk-2.0', 'c:\GTK\lib\glib-2.0\include', 'c:\GTK\lib\gtk-2.0\include', 'c:\GTK\include\pango-1.0', 'c:\GTK\include\libglade-2.0', 'c:\GTK\include\libxml2'], LIBPATH=['lib', 'c:\GTK\lib'],LIBS=['gdk-win32-2.0', 'gdk_pixbuf-2.0', 'gmodule-2.0', 'xml2', 'glade-2.0', 'gobject-2.0', 'gtk-win32-2.0', 'glib-2.0'])
    
glib = env.Copy()
glade = env.Copy()
gtk = env.Copy()

if str(plataforma) == str('posix'):
    glib.ParseConfig('pkg-config glib-2.0 --cflags --libs')
    glade.ParseConfig('pkg-config libglade-2.0 --cflags --libs')
    gtk.ParseConfig('pkg-config gtk+-2.0 --cflags --libs')

# Libpipeline
libpip = glib.Copy()
libpip.ParseConfig('pkg-config xml2 --cflags')
libpipeline = libpip.Library('lib/pipeline', 'src/libpipeline/pipeline.c')
env.Install('bin', ['src/libpipeline/pipeline.dtd'])

# Libparalelo
libpar = glib.Copy()
libparalelo = libpar.Library('lib/paralelo', 'src/libparalelo/paralelo.c')
if str(plataforma) == str('win32'):
    env.Install('bin', ['src/libparalelo/inpout32.dll'])

# Gestion
glib.SharedLibrary('bin/gestion', 'src/gestion/gestion.c')


# Prolog
glib.SharedLibrary('bin/prolog', 'src/prolog/prolog.c')

# Filtro gestos
fil = glib.Copy()
fil.Append(LIBS=['lua', 'lualib'])
fil.SharedLibrary('bin/filtro_gestos', 'src/filtro_gestos/filtro_gestos.c')
env.Install('bin', ['src/filtro_gestos/filtro.lua'])

# Salida
glade.SharedLibrary('bin/salida', 'src/salida/salida.c')
env.Install('bin', ['src/salida/ventana_salida.glade'])

# La ventana de imagenes
glade.SharedLibrary('bin/ventana_imagen', 'src/ventana_imagen/ventana_imagen.c')
env.Install('bin', ['src/ventana_imagen/ventana_imagen.glade'])

# Imagenes o camara, segun sea Linux o Windows
if str(plataforma) == str('posix'):
    img = gtk.Copy()
    img.ParseConfig('pkg-config libxine --cflags --libs')
    img.Append(LIBS=['sane'])
    img.SharedLibrary('bin/imagenes', 'src/imagenes/imagenes.c')
    env.Install('bin', ['src/imagenes/letra.xpm', 'src/imagenes/avanzar.xpm', 'src/imagenes/foto.xpm'])
    env.Install('bin', ['src/pipeline/vision.xml'])
else:
    cam = glib.Copy()
    cam.Append(LIBS=['strmiids', 'uuid', 'oleaut32', 'ole32', 'quartz', 'user32'])
    cam.SharedLibrary('bin/camara', ['src/camara/camara.cpp', 'src/camara/Captura.cpp'])
    env.Install('bin', ['src/pipeline/camara.xml'])
    env.Install('bin', ['src/pipeline/nulo.xml'])

# Si estamos en win32, construimos el entorno3D
if str(plataforma) == str('win32'):
	e3d = glib.Copy()
	e3d.Append(CPPPATH=['src/entorno_3d/include'])
	e3d.Append(LIBS=['d3dx9', 'd3d9', 'd3dx9dt', 'strmbasd', 'winmm','kernel32','user32','gdi32','winspool','comdlg32','advapi32','shell32','ole32','oleaut32','uuid','odbc32','odbccp32'])
	e3d.SharedLibrary('bin/entorno_3d', glob.glob('src/entorno_3d/src/*.cpp'))
	env.Install('bin', 'src/entorno_3d/luz.txt')
	env.Install('bin', 'src/entorno_3d/terrenotemplo.txt')
	env.Install('bin', 'src/entorno_3d/cursor.cur')
	env.Install('bin/flare', glob.glob('src/entorno_3d/flare/*.bmp'))
	env.Install('bin/texturas', glob.glob('src/entorno_3d/texturas/*.bmp'))
	env.Install('bin/texturas', glob.glob('src/entorno_3d/texturas/*.jpg'))
	env.Install('bin/modelos', 'src/entorno_3d/modelos/r2.x')
	env.Install('bin/modelos', 'src/entorno_3d/modelos/templo.X')
	env.Install('bin/modelos', 'src/entorno_3d/modelos/TerrenoTemplo.raw')

# Ocr
glib.SharedLibrary('bin/ocr', ['src/ocr/ocr.c', 'src/ocr/ocr_code.c'])
env.Install('bin', ['src/ocr/base_datos'])

# Post gestion
glib.SharedLibrary('bin/post_gestion', 'src/post_gestion/post_gestion.c')

# Red neuronal
glib.SharedLibrary('bin/red_neuronal', ['src/red_neuronal/red.c', 'src/red_neuronal/red_neuronal.c'])
env.Install('bin', ['src/red_neuronal/orden_net'])

# Robot
rob = glib.Copy()
if str(plataforma) == str('posix'):
	rob.Prepend(LIBS=['lua', 'lualib', 'paralelo', 'parapin'])	
else:
	rob.Prepend(LIBS=['lua', 'lualib', 'paralelo'])	
rob.SharedLibrary('bin/robot', 'src/robot/robot.c')
env.Install('bin', ['src/robot/robot.lua'])

# Ventana parametros
glade.SharedLibrary('bin/ventana_parametros', 'src/ventana_parametros/ventana_parametros.c')
env.Install('bin', ['src/ventana_parametros/ventana_parametros.glade'])


# El ejecutable
pip = glade.Copy()
pip.Prepend(LIBS=['pipeline'])
pip.ParseConfig('pkg-config xml2 --libs')
prog_pip = pip.Program('bin/pipeline', 'src/pipeline/main.c')
Depends(prog_pip, libpipeline)
env.Install('bin', ['src/pipeline/ventana_pipeline.glade'])

# Documentacion
if str(plataforma) == str('posix'):
    def tex_action(source, target, env, for_signature):
        prog = 'latex'
        (dir, file) = os.path.split(str(source[0]))
        cmd = prog + ' ' + file
        if dir != '':
            cmd = 'cd %s && %s' % (dir, cmd)
            return cmd
        
    env['BUILDERS']['DVI'] = Builder(generator = tex_action,
                                     suffix='.dvi',
                                     src_suffix='.tex')

    env.Append(BUILDERS = {'Dia' : Builder(action = 'dia $SOURCE -t eps -e $TARGET')})
    
    files = glob.glob('doc/*.tex')
    
    doc = env.DVI('doc/vision.dvi', 'doc/vision.tex')
    
    ps = env.PostScript('bin/vision.ps', 'doc/vision.tex')

    dia = env.Dia('doc/pipeline.eps', 'doc/pipeline.dia')
    
    Depends(doc, files + dia)

    Depends(ps, doc)
